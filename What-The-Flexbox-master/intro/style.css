/* CSS Normalize */
article,aside,details,figcaption,figure,footer,header,hgroup,nav,section,summary{display:block;}audio,canvas,video{display:inline-block;}audio:not([controls]){display:none;height:0;}[hidden]{display:none;}html{font-family:sans-serif;-webkit-text-size-adjust:100%;-ms-text-size-adjust:100%;}a:focus{outline:thin dotted;}a:active,a:hover{outline:0;}h1{font-size:2em;}abbr[title]{border-bottom:1px dotted;}b,strong{font-weight:700;}dfn{font-style:italic;}mark{background:#ff0;color:#000;}code,kbd,pre,samp{font-family:monospace, serif;font-size:1em;}pre{white-space:pre-wrap;word-wrap:break-word;}q{quotes:\201C \201D \2018 \2019;}small{font-size:80%;}sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}sup{top:-.5em;}sub{bottom:-.25em;}img{border:0;}svg:not(:root){overflow:hidden;}fieldset{border:1px solid silver;margin:0 2px;padding:.35em .625em .75em;}button,input,select,textarea{font-family:inherit;font-size:100%;margin:0;}button,input{line-height:normal;}button,html input[type=button],/* 1 */
input[type=reset],input[type=submit]{-webkit-appearance:button;cursor:pointer;}button[disabled],input[disabled]{cursor:default;}input[type=checkbox],input[type=radio]{box-sizing:border-box;padding:0;}input[type=search]{-webkit-appearance:textfield;-moz-box-sizing:content-box;-webkit-box-sizing:content-box;box-sizing:content-box;}input[type=search]::-webkit-search-cancel-button,input[type=search]::-webkit-search-decoration{-webkit-appearance:none;}textarea{overflow:auto;vertical-align:top;}table{border-collapse:collapse;border-spacing:0;}body,figure{margin:0;}legend,button::-moz-focus-inner,input::-moz-focus-inner{border:0;padding:0;}

/* Box-sizing border-box */
* { -moz-box-sizing: border-box; -webkit-box-sizing: border-box; box-sizing: border-box; }


/* Some default styles to make each box visible */
.box {
  color:white;
  font-size: 100px;
  text-align: center;
  text-shadow: 4px 4px 0 rgba(0,0,0,0.1);
  padding: 10px;
}

/* Colours for each box */
.box1 { background:#1abc9c;}
.box2 { background:#3498db;}
.box3 { background:#9b59b6;}
.box4 { background:#34495e;}
.box5 { background:#f1c40f;}
.box6 { background:#e67e22;}
.box7 { background:#e74c3c;}
.box8 { background:#bdc3c7;}
.box9 { background:#2ecc71;}
.box10 { background:#16a085;}


/* We start writing out flexbox here. The above is just page setup */
/* display flex makes the children to behave as flexbox-items */
/* two axis main axis: direction in which the items are laid out */
/* cross-axis: ddirection perpendicular to main axis */

.container{
  /* display: inline-flex; */
  /* inline flex makes the child behave as inline elements inside the flexbox */

  display: flex;
  /* flex makes them behave as block elements inside the container */

  /* flex-direction: column; */
  /* flex-direction decides the main axis, default row hence the items are laid out left right in english typing */
  /* row/row-reverse/column/column-reverse */

  /* flex-wrap: wrap; */
  /* flex-wrap: wrap ups the elements when the container runs out of space, default--nowrap */
  /* nowrap/wrap/wrap-reverse */

  /* justify-content: space-between; */
  /* justify-content is used for laying out the elements across the main-axis */
  /* flex-start/flex-end/center/space-between:spaces between not at the ends/space-evenly/space-around */
  /* justify-content: space-bet */

  /* align-items: baseline; */
  /* align-items is used to layout the elements across the cross axis, default stretch */
  /* stretch/center/flex-start/flex-end/baseline */

  /* align-content: center; */
  /* this is used to layout the items on the cross-axis, the extra spaces on the cross-axis */
  /* flex-start/flex-end/center/space-between/space-evenly/space-around/stretch */
  /* height: 100vh; */
}

/*
.box:nth-child(even){
  height: 120px;
  align-self: flex-end;
  // align self is used to for individual flex-items
  //stretch:center:flex-start:flex-end:baseline
}*/

/* everything is set to order of zero */
/* any number greater than 0 will set it to last and -ve will set it to start */
/* .box7{
  order: 1;
}
.box3{
  order: -1;
} */

/* flex is short hand combination of flex-grow/flex-shrink/flex-basis */
/* flex makes the element grow and shrink as required based on the available space */
/* flex-basis sets the size in the ideal condition before the element starts to grow and shrink */
.box1{
  /* flex-basis: 400px;
  flex-grow: 10;
  flex-shrink: 5; */
  flex: 10 5 400px;
}
.box2{
  /* flex-basis: 400px;
  flex-grow: 1;
  flex-shrink: 1; */
  flex: 1 1 400px;
}





